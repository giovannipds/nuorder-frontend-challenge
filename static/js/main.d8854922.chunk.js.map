{"version":3,"sources":["logo.svg","services/issues.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bearerToken","process","headers","Accept","Authorization","api","axios","create","baseURL","timeout","searchIssues","text","a","console","log","terms","push","trim","get","params","q","join","response","issues","data","items","error","App","useState","searchTerm","setSearchTerm","issue","setIssue","loadOptions","useCallback","debounce","inputValue","callback","getOptions","then","options","map","html_url","id","labels","number","issueLabels","label","title","value","customStyles","control","provided","fontSize","menuList","maxHeight","option","fontWeight","textAlign","className","href","rel","target","src","logo","alt","cacheOptions","formatOptionLabel","item","key","color","description","name","backgroundColor","textColor","Color","isDark","style","loadingMessage","noOptionsMessage","onChange","issueOption","onInputChange","newValue","placeholder","styles","aria-label","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8854922.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.23779e18.svg\";","import axios from \"axios\";\r\n\r\nconst bearerToken = process.env.REACT_APP_GITHUB_BEARER_TOKEN;\r\n\r\nconst headers = {\r\n  Accept: \"application/vnd.github.v3+json\",\r\n};\r\n\r\nif (bearerToken) headers.Authorization = `Bearer ${bearerToken}`;\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.github.com\",\r\n  headers,\r\n  timeout: 10000,\r\n});\r\n\r\nconst repo = \"facebook/react\";\r\n\r\nexport const searchIssues = async (text) => {\r\n  console.log(\"Searching issues...\");\r\n  const terms = [`repo:${repo}`];\r\n  if (text) terms.push(text.trim());\r\n  try {\r\n    const response = await api.get(`search/issues`, {\r\n      params: {\r\n        q: terms.join(\" \"),\r\n      },\r\n    });\r\n    const issues = response.data.items;\r\n    return issues;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [];\r\n  }\r\n};\r\n","import React, { useCallback, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport AsyncSelect from \"react-select/async\";\nimport { searchIssues } from \"./services/issues\";\nimport debounce from \"lodash.debounce\";\nimport Color from \"color\";\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [issue, setIssue] = useState(\"\");\n  const delay = 500;\n\n  const loadOptions = useCallback(\n    debounce((inputValue, callback) => {\n      getOptions(inputValue).then((options) => callback(options));\n    }, delay),\n    []\n  );\n\n  const getOptions = async (inputValue) => {\n    const issues = await searchIssues(inputValue);\n    const options = issues.map((issue) => {\n      const { html_url, id, labels, number, title } = issue;\n      return { html_url, issueLabels: labels, label: title, number, value: id };\n    });\n    return options;\n  };\n\n  const handleInputChange = (newValue) => setSearchTerm(newValue);\n\n  const handleChange = (issueOption) => {\n    setIssue(issueOption);\n  };\n\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      fontSize: 16,\n    }),\n    menuList: (provided) => ({\n      ...provided,\n      maxHeight: \"calc(35vh);\",\n    }),\n    option: (provided) => ({\n      ...provided,\n      fontSize: 14,\n      fontWeight: 600,\n      textAlign: \"left\",\n    }),\n  };\n\n  const formatOptionLabel = ({ issueLabels, label }) => (\n    <div>\n      <span className=\"Option-label\">{label}</span>\n      {issueLabels.map((item, key) => {\n        const { color, description, name } = item;\n        const backgroundColor = `#${color}`;\n        const textColor = Color(backgroundColor).isDark() ? \"#fff\" : \"#000\";\n        return (\n          <small\n            className=\"Issue-label\"\n            key={key}\n            style={{ backgroundColor, color: textColor }}\n            title={description}\n          >\n            {name}\n          </small>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-logo\">\n          <a\n            href=\"https://nu.nuorder.com/index.html\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            title=\"Go to nuorder.com\"\n          >\n            <img src={logo} alt=\"NuORDER\" />\n          </a>\n          <span>Front-end Challenge</span>\n        </h1>\n      </header>\n      <main>\n        <p>\n          Issues for{\" \"}\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/facebook/react/issues\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            title=\"Open repo issues\"\n          >\n            Facebook React <abbr title=\"repository\">repo</abbr>\n          </a>\n          :\n        </p>\n        <span className=\"Select-container\">\n          <AsyncSelect\n            cacheOptions\n            formatOptionLabel={formatOptionLabel}\n            loadingMessage={() => \"Wait, loading...\"}\n            loadOptions={loadOptions}\n            // menuIsOpen={searchTerm}\n            noOptionsMessage={() => (searchTerm ? \"Nothing\" : \"Type anything\")}\n            onChange={handleChange}\n            onInputChange={handleInputChange}\n            placeholder=\"Search\"\n            styles={customStyles}\n            value={issue}\n          />\n        </span>\n        {issue && (\n          <div className=\"Button-container\">\n            <a\n              className=\"Button\"\n              href={issue.html_url}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Go to Issue #{issue.number}\n            </a>\n          </div>\n        )}\n      </main>\n      <footer className=\"Footer\">\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/giovannipds\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          title=\"See dev's GitHub\"\n        >\n          <span aria-label=\"With love\" role=\"img\">\n            ❤️\n          </span>{\" \"}\n          <span className=\"App-link-label\">Giovanni Pires</span>\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}